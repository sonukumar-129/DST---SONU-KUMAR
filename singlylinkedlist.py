# -*- coding: utf-8 -*-
"""SinglyLinkedList

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10LrQ61RVHYcibSHdGge_eQ3pt4VbZZdf
"""

class Node:
  def __init__(self,data):
    self.data=data
    self.next=None
class Linkedlist:
  def __init__(self):
    self.head=None
  def display(self):
    if self.head is None:
      print("linked list is empty")
    else:
      x=self.head
      while x is not None:
        print(x.data,"-->", end=" ")
        x=x.next
  def add_begin(self,data):
    nb=Node(data)
    nb.next=self.head
    self.head=nb
  def add_end(self,data):
    ne=Node(data)
    y=self.head
    while y.next:
      y=y.next
    y.next=ne
  def add_any(self,pos,data):
    np=Node(data)
    p=self.head
    for i in range (pos-1):
      p=p.next
    np.data=data
    np.next=p.next
    p.next=np
  def del_begin(self):
    z=self.head
    self.head=z.next
    z.next=None
  def del_end(self):
    if self.head is None:
      print("LL is empty so we can't delete nodes")
    else:
      temp=self.head
      while temp.next.next is not None:
        temp=temp.next
      temp.next=None
  def del_pos(self,pos):
    temp=self.head.next
    x=self.head
    for i in range ()


L=Linkedlist()
n=Node(5)
L.head=n
n1=Node(10)
n.next=n1
n2=Node(15)
n1.next=n2
n3=Node(20)
n2.next=n3
L.add_begin(0)
L.add_end(25)
L.add_any(3,100)
L.del_begin()
L.del_end()
L.display()