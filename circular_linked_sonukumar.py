# -*- coding: utf-8 -*-
"""circular_linked/sonukumar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DTQ46f65wUd_iZGbLBiQK5aQ0ONWyWX7
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def push(head, data):
    newP = Node(data)
    newP.next = head

    if head != None:
        temp = head
        while temp.next != head:
            temp = temp.next
        temp.next = newP
    else:
        newP.next = newP
    head = newP
    return head

def printList(head):
    if head == None:
        print("List is Empty")
        return
    temp = head.next
    print(head.data, end=' ')
    if head != None:
        while temp != head:
            print(temp.data, end=" ")
            temp = temp.next
    print()

def deleteNode(head, key):
    if head == None:
        return

    if head.data == key and head.next == head:
        head = None
        return

    last = head

    if head.data == key:
        while last.next != head:
            last = last.next
        last.next = head.next
        head = last.next
        return head

    while last.next != head and last.next.data != key:
        last = last.next

    if last.next.data == key:
        d = last.next
        last.next = d.next
        d = None
    else:
        print("Given node is not found in the list!!!")

def insertAtPos(head, data, pos):
    newP = Node(data)

    if pos == 0:
        newP.next = head
        temp = head
        while temp.next != head:
            temp = temp.next
        temp.next = newP
        head = newP
    else:
        temp = head
        for _ in range(pos - 1):
            temp = temp.next

        newP.next = temp.next
        temp.next = newP

    return head

def deleteNodeByValue(head, value):
    if head == None:
        return

    last = head

    if head.data == value:
        while last.next != head:
            last = last.next
        last.next = head.next
        head = last.next
        return head

    while last.next != head and last.next.data != value:
        last = last.next

    if last.next.data == value:
        d = last.next
        last.next = d.next
        d = None
    else:
        print("Given node with value", value, "is not found in the list!!!")

def insertAtEnd(head, data):
    newP = Node(data)

    if head == None:
        newP.next = newP
        head = newP
    else:
        temp = head
        while temp.next != head:
            temp = temp.next
        temp.next = newP
        newP.next = head

    return head

def deleteAtBeginning(head):
    if head == None:
        return

    if head.next == head:
        head = None
    else:
        temp = head
        while temp.next != head:
            temp = temp.next
        temp.next = head.next
        head = head.next

    return head

def deleteAtEnd(head):
    if head == None:
        return

    if head.next == head:
        head = None
    else:
        temp = head
        while temp.next.next != head:
            temp = temp.next
        temp.next = head

    return head

# Initialize lists as empty
head = None

head = push(head, 12)
head = push(head, 53)
head = push(head, 76)
head = push(head, 48)
head = push(head, 130)

print("List Before Deletion:")
printList(head)

deleteNode(head, 76)
print("List After Deletion:")
printList(head)

head = insertAtPos(head, 4, 2)
print("List After Insertion at position 2:")
printList(head)

deleteNodeByValue(head, 53)
print("List After Deletion of node with value 53:")
printList(head)

head = insertAtEnd(head, 99)
print("List After Insertion at End:")
printList(head)

head = deleteAtBeginning(head)
print("List After Deletion at Beginning:")
printList(head)

head = deleteAtEnd(head)
print("List After Deletion at End:")
printList(head)